//// 
/// _mixins.scss
/// @group Mixins
/// @author [Diego Martin Marmol](http://twitter.com/dmmarmol)
////

/// @name Clearfix
/// @since 0.3.0
/// @param none
@mixin clear() {
	*zoom: 1;
	&:before, &:after { content: ""; display: table; }
	&:after { clear: both; }
}

/// Creates a .row element
/// @group Grid Mixins
/// @since 0.0.4
@mixin row($offset: $col-offset) {
	width: auto;
	margin-right: (-$offset);
	margin-left: (-$offset);
}

/// Creates a .col/.column element
/// @group Grid Mixins
/// @since 0.0.4
@mixin cols($offset: $col-offset) {
	position: relative;
	display: block;
	padding-left: $offset;
	padding-right: $offset;
	float: left;
}

/// Collapses an element substracting his x-axis margins
/// @group Grid Mixins
/// @since 0.0.4
@mixin collapse( $custom-offset: $em-offset ) {
	margin-right: (-$custom-offset);
	margin-left: (-$custom-offset);	
}



// ============================================
// SHADOWS
// ============================================

/// Box Shadow
/// -webkit- prefix deprecated since 0.3.1
/// @group Shadow Mixins
/// @see http://compass-style.org/reference/compass/css3/box_shadow/
@mixin box-shadow( $values... ) {
	box-shadow: $values;
	// -webkit-box-shadow: $values;
}

/// Border Radius
/// -webkit- prefix deprecated since 0.3.1
/// @group Shadow Mixins
/// @since 0.3.7
@mixin border-radius( $radius: 5px ) {
	border-radius: $radius;	
	// -webkit-border-radius: $radius;
}



// ===============================================
// TRANTISION
// ===============================================

/// DELAY TRANSITION
/// @group Transition Mixins
/// @since 0.1.0
@mixin delay( $value:0 ) {
	-webkit-transition-delay: $value;
    // -moz-transition-delay: $value;
    // -ms-transition-delay: $value;
    // -o-transition-delay: $value;
	transition-delay: $value;
}

/// TRANSITION THE TRANSFORM PROPERTY
/// @group Transition Mixins
/// @since 0.2.0
/// @param $values {string} | String containing the values of the transition property
@mixin transition-transform( $values ) {
	@each $p in $prefix-transform {
		@include transition( #{$p}transform $values );
	}
}




// ===============================================
// BACKGROUND
// ===============================================

/// Color de fondo con fallbacks y pollyfils
/// @group Background Mixins 
/// @since 0.0.2
@mixin bdk-background($color, $alpha:1) {
	$rgba: rgba(0, 0, 0, 0);
	@if $color != transparent {
		$rgba: rgba($color, $alpha);
	}
	$ie-hex-str: ie-hex-str($rgba);

	background-color: transparent;
	background-color: $rgba;
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
	zoom: 1;
}

/// GRADIENT BACKGROUND
/// @group Background Mixins 
/// @since 0.0.2
@mixin gradient($from, $to) {
	background: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background: -moz-linear-gradient(top,  $from, $to);
	filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
}

/// Convert To GRAYSCALE
/// @group Background Mixins 
/// @since 0.0.2
@mixin grayscale( $action:'show', $hover:false) {
	@if $action == 'hide' or $action == 'remove' {
		filter: none;
		-webkit-filter: grayscale(0);		
	} @else {
		filter: url(filters.svg#grayscale); /* Firefox 3.5+ */
		filter: gray; /* IE6-9 */
		-webkit-filter: grayscale(1); /* Google Chrome, Safari 6+ & Opera 15+ */
		@if $hover == 'hover' {
			&:hover {
				filter: none;
				-webkit-filter: grayscale(0);
			}
		}
	}
}




// ===============================================
// ANIMATIONS
// ===============================================

/// Define a CSS Animation
/// @example @include animation( animationName 10s 5s, true)
/// @group Animation Mixins
/// @since 0.0.1
@mixin animation( $animation-arguments, $repeat: false) {
	// 
	// animation-name
	// animation-duration
	// animation-timing-function
	// animation-delay
	// animation-iteration-count
	// animation-direction.
	//
	@if $animation-arguments == none {
		// There is no animation
		-webkit-animation: none;
		animation: none;
	} @else {
		-webkit-animation: $animation-arguments;
		animation: $animation-arguments;
		@if $repeat == false {
			// this prevents the animation from restarting!
			-webkit-animation-fill-mode: forwards; 
			animation-fill-mode: forwards;
		} @else {
			-webkit-animation-iteration-count: infinite;
			animation-iteration-count: infinite;
		}
	}
}

/// Single animation delay property
/// @since 0.0.1
/// @group Animation Mixins
@mixin animation-delay( $value: 0 ) {
	animation-delay: $value;
	-webkit-animation-delay: $value; // Safari and Chrome
}



/// Animation Steps
/// @since 0.5.0
/// @group Animation Mixins
/// @param {string} $animation-name
/// @param {map} $settings - Frame animation settings
@mixin animation-steps( $animation-name, $settings: (e:e) ) {
	// @debug type-of( $settings ); 
	@if ( type-of( $settings ) == map  ) {
		@if ( function-exists( map-push ) ) {			
			$settings: map-push((
				width: 100px,
				height: 100px,
				duration: 1s,
				frames: 1,
				sprite: 'http://placehold.it/100x100',
			), $settings );	
			// @debug $settings;
			width: map-get( $settings, width);
			height: map-get( $settings, height);
			background-image: url( map-get( $settings, sprite ) );    
		    -webkit-animation: #{$animation-name} map-get( $settings, duration ) steps( map-get( $settings, frames ) ) infinite;
		            animation: #{$animation-name} map-get( $settings, duration ) steps( map-get( $settings, frames ) ) infinite;
		} @else {
			@warn "`@function map-push()` is not defined";
		}
	} @else {
		 @warn "`$settings` is not a map type object";
	}
}


/// Number of times that an animation should be repeated
/// @since 0.3.2
/// @group Animation Mixins
@mixin animation-count( $times ) {
	-webkit-animation-iteration-count: $times;
	animation-iteration-count: $times;
}


/// Calculate the images aspect ratio
/// @group Mixins
/// @example
/// The image/video needs to be inside a container
/// @include the @mixin in the container and asing
/// an element to be affected in the second argument.
/// @param {int} $value | Custom value in percentage
/// @param {string} $element | The <tag> element to be affected by the aspect ratio
@mixin aspect-ratio($value, $element: false){
	// Ratios
	$widescreen: 	calculate-ratio(16, 9);	// 56.25%
	$traditional: 	calculate-ratio(4, 3);	// 75c%

	// Wrapper
	position: relative;
	&:before { 
		padding-top: $value; 			
		content: '';
		display: block;            
	}
	// Content
	@if $element != false {
		#{$element} {
			position: absolute; 
			top: 0; left: 0; bottom: 0; right: 0;
			width: 100%;
			height: 100%; 			
		}
	} @else {
		> * {
			position: absolute; 
			top: 0; left: 0; bottom: 0; right: 0;
			width: 100%;
			height: 100%;
		}
	}
}
/// Calculate the aspect ratio
/// @group Mixins
/// @since 0.0.1
@function calculate-ratio( $num1, $num2:false ){
	@return ( $num2 / $num1 ) * 100%;		
}

/// OPACITY WITH IE8 SUPPORT
/// @group Mixins
/// @since 0.0.1
@mixin opacity( $value ) {
	$ie-value:	$value * 100;
	opacity: $value; // CSS3
	// -moz-opacity: $value; // Older than Firefox 0.9
	// -khtml-opacity: $value; // Safari 1.x (pre WebKit!)
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=50)"; // IE 8
	filter: alpha(opacity= $ie-value ); // IE6+
	zoom: 1;
}




// ======================================
// TEXT
// ======================================

/// TEXT SHADOW
/// @group Text Mixins
/// @since 0.0.1
@mixin text-shadow( $values... ) {
	text-shadow: $values;
}

/// TEXT STROKE
/// @group Text Mixins
/// @since 0.0.1
@mixin text-stroke($stroke-width, $stroke-color: false, $stroke-fill: auto) {
	-webkit-text-stroke-width: $stroke-width;
	-webkit-text-stroke-color: $stroke-color;
	-webkit-text-fill-color: $stroke-fill;
}

/// HALF LINE OVER TEXT
/// Dibuja una linea en medio del eje Y (vertical) del elemento
/// @group Text Mixins
/// @since 0.1.0
@mixin half-line($width, $height: 1px, $color:hsl(0,0,97%), $element:'&') {
	position: relative;
	#{$element} {
        display: inline-block;    
    }
    #{$element}:before, #{$element}:after {
        // border-top: 1px solid black;
        background-color: $color;
        display: block;
        height: $height;
        content: " ";
        width: $width;
        position: absolute;
        left: 0;
        top: 50%;
        margin-top: -$height;
    }
    #{$element}:after {
       right: 0;  
       left: auto; 
    }
}

/// Cuts a certain line of text and adds an ellipsis at the end
/// @group Text Mixins
/// @since 0.0.5
@mixin line-clamp( $line ) {
	display: -webkit-box;
	-webkit-line-clamp: $line;
	-webkit-box-orient: vertical;
	text-overflow: -o-ellipsis-lastline;
	overflow: hidden;
}

/// Cuts a single line of text and add ellipsis
/// @group Text Mixins
/// @since 0.0.5
@mixin truncate-line($activated: true) {
	@if $activated == true {
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
		-o-text-overflow: ellipsis; /* Prefix for Opera Mini 5.0 - 7.0 */		
	} @else {		
		white-space: initial;
		overflow: visible;
		text-overflow: none;
		-o-text-overflow: none; /* Prefix for Opera Mini 5.0 - 7.0 */		
	}
}

/// Maximo de lineas visibles en un texto
/// @group Text Mixins
/// @since 0.0.5
@mixin max-lines( $num-of-lines, $line-height:inherit, $ellipsis:false ) {
	line-height: $line-height;
	max-height: $num-of-lines * strip-units( $line-height ) * 1em;
	overflow: hidden;
	@if ( $ellipsis ) {
		@include line-clamp( $num-of-lines );
	}
}

/// Define la propiedad color y la aplica a todos sus descendientes
/// @group Text Mixins
/// @since 0.1.0
@mixin color( $value, $and:false ) {
	@content;
	color: $value;
	@if ($and) {
		* { &:after, &:before, #{$and} { color: inherit; } }
	} @else {
		* { &:after, &:before { color: inherit; } }		
	}
}



// ======================================
// MEDIA QUERIES
// ======================================

/// Hasta 1024px 
/// @group Media Query Mixins
/// @since 0.0.4
@mixin screen( $screen: 1024px, $condition: 'max-width' ) {
	@media only screen and (#{$condition}: $screen) {
		@content;
	}
}

/// $netbook: 600px;
/// @group Media Query Mixins
/// @since 0.0.4
@mixin netbook() {
	@include screen( 600px, 'max-height' ) {
		@content;
	}
}

/// Mobile
/// @group Media Query Mixins
/// @since 0.0.4
@mixin mobile( $width:739px ) {
	@media only screen and (max-width: $width) {
		@content;
	}
}

/// Media query para maximo en altura
/// @group Media Query Mixins
/// @since 0.0.4
@mixin max-screen-height( $height ) {
	@include screen( $height, 'max-height' ) {
		@content;
	}
}

/// Firefox Only Styling
/// @group Media Query Mixins
/// @since 0.0.4
@mixin firefox() {
	@-moz-document url-prefix() {
		@content;
	}
}

/// Target all the IE versions
/// @group Media Query Mixins
/// @since 0.0.4
@mixin ie($version:false) {
		@if $version == 8 {
			$version: '.lt-ie9';
		} @elseif $version == 7 {
			$version: '.lt-ie8, .lt-ie9';
		} @elseif $version == 6 {
			$version: '.lt-ie7, .lt-ie8, .lt-ie9';
		}
	html.ie {
		@if $version != false {
			&#{$version} {
				@content;				
			}
		} @else {
			@content;
		}
	}
}

/// Media query para capturar un espectro entre dos (2) anchos
/// @group Media Query Mixins
/// @since 0.0.4
@mixin media-between-width( $min-width, $max-width: 1680px ) {
	@media only screen and (min-width: $min-width) and (max-width: $max-width ) {
		@content;
	}
}




// ========================================
// ALIGNMENT & POSITION
// ========================================

/// HORIZONTAL CENTER - Alineación clasica
/// @group Align Mixins
/// @since 0.0.1
@mixin center($important: false){
	margin-left: auto;
	margin-right: auto; 
	float: none;
	display: block;	
}

/// ABSLUTE VERTICAL ALIGN
/// @group Align Mixins
/// @since 0.0.1
@mixin v-center($important: false){
	display: block;
	@if $important { position: absolute!important; } @else { position: absolute; } 
	top: 0; right: auto; bottom: 0; left: auto;
	margin: auto;
	@if $important { float: none!important; } @else { float: none; } 
}

/// ABSLUTE VERTICAL & HORIZONTAL ALIGN
/// @group Align Mixins
/// @since 0.0.1
@mixin a-center($important: false){
	display: block;
	@if $important { position: absolute!important; } @else { position: absolute; } 
	top: 0; right: 0; bottom: 0; left: 0;
	margin: auto;
	@if $important { float: none!important; } @else { float: none; } 
}

/// Aplicar estilos al contenedor para 
/// alinear verticalmente al descendiente
/// @group Align Mixins
/// @since 0.1.0
@mixin table-v-center( $element ) {
	&:before {
		content: '';
		display: inline-block;
		vertical-align: middle;
		margin-right: -0.25em; 
		height: 100%;
	}
	#{$element} {
		@content;
		display: inline-block;
		vertical-align: middle;
	}
}

/// Absolute Horizontal center align
/// @since 0.0.2
/// @group Align Mixins
@mixin h-center() {
	position: absolute;
	left: 0;
	right: 0;
	margin: auto;
}

/// Alinea verticalmente un texto (una o multiples lineas)
/// @group Align Mixins
/// @since 0.0.5
@mixin vertical-align-middle( $element ) {
	& {
		width: 100%;
		position: relative;
		display: table;
		#{$element} {
			display: table-cell;
			vertical-align: middle;
			float: none;
			@content;
		}
	}
}

/// Establece un orden de los elementos en el eje Z en
/// base a su posición en una lista
/// @group Align Mixins
/// @since 0.3.2
/// @param $list {array} | Lista con los elementos en orden de importancia (el primero es el más alto)
@mixin z($list) {
	@each $z in $list {
		#{$z} {
			z-index: z($list, '#{$z}');
		}
	}
}


// ========================================
// INPUTS & FORMS
// ========================================

/// PLACEHOLDERS
/// @group Form Mixins
/// @since 0.0.2
@mixin placeholder {
	&.placeholder				 { @content }
	&::-webkit-input-placeholder { @content }
	&:-moz-placeholder           { @content }
	&::-moz-placeholder          { @content }
	&:-ms-input-placeholder      { @content }
}
@mixin reset-search() {
	&::-webkit-search-decoration,
	&::-webkit-search-cancel-button,
	&::-webkit-search-results-button,
	&::-webkit-search-results-decoration {
		@content;
	}
}

/// Android style inputs (pre Lollypop)
/// @group Form Mixins
/// @since 0.1.4
@mixin android-input-border($color: $gray-border, $width: 1px, $height: 6px) {
	$bg: linear-gradient($color, $color);
	@include background(
		bottom left $bg no-repeat,
		bottom center $bg repeat-x,
		bottom right $bg no-repeat
	);
	@include background-size(
		$width $height,
		$width $width,
		$width $height
	);
}

/// RESET MOZILLA SELECT TAG
/// @group Form Mixins
/// @since 0.1.0
@mixin reset-moz-select() {
    -moz-appearance: none;
    text-overflow: ""; // Hide the default down arrow
    background: transparent;
}

/// RESET INPUT DEFAULT APPEARENCE
/// @group Form Mixins
/// @since 0.1.0
@mixin reset-input() {
	appearance: none;
	-moz-appearance: none;
	-webkit-appearance: none;		
}

/// User Select
/// @group Mixins
/// @since 0.0.4
@mixin user-select( $value ) {
	@each $p in $prefix-user-select {
		#{$p}user-select: $value;
	}
	user-select: $value;
}



/// @since 0.1.4
// Flexbox mixins
// =============
@mixin flex-display() {
	display: -webkit-box;
	display: -moz-box;
	display: -ms-flexbox;
	display: -webkit-flex;	
	display: flex;
}
@mixin flex-box-direction($value: normal){
	// OPTIONS
	// ====================
	// normal
	// reverse
	// ====================
    -webkit-box-direction: $value;
    -moz-box-direction: $value;
}
@mixin flex-box-orient($value: horizontal){
	// OPTIONS
	// ====================
	// block-axis
	// inline-axis
	// horizontal
	// vertical
	// ====================
    -webkit-box-orient: $value;
    -moz-box-orient: $value;
}
@mixin flex-direction($value: row) {
	// OPTIONS
	// ====================
	// column
	// column-reverse
	// row
	// row-reverse
	// initial
	// ====================
    -webkit-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
}
@mixin flex-wrap($value: nowrap) {
	// OPTIONS
	// ====================
	// no-wrap
	// wrap
	// wrap-reverse
	// ====================
    -webkit-flex-wrap: $value;
    -ms-flex-wrap: $value;
    flex-wrap: $value;
}
@mixin flex-content($value: flex-start) {
	// OPTIONS
	// ====================
	// flex-end
	// flex-start
	// center
	// space-arround
	// space-between
	// initial
	// ====================
    -moz-box-pack: $value;
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
    -webkit-justify-content: $value;
    justify-content: $value;
}
@mixin flex-stretching($value: stretch) {
	// OPTIONS
	// ====================
	// flex-end
	// flex-start
	// center
	// space-arround
	// space-between
	// stretch
	// initial
	// ====================
    -webkit-align-content: $value;
    -ms-flex-line-pack: $value;
    align-content: $value;

}
@mixin flex-align($value: center) {
	// OPTIONS
	// ====================
	// flex-end
	// flex-start
	// center
	// baseline
	// stretch
	// initial
	// ====================
    -webkit-box-align: $value;
    -moz-box-align: $value;
    -webkit-align-items: $value;
    -ms-flex-align: $value;
    align-items: $value;
}

// Llamado que solo centra verticalmente
@mixin flexbox() {
	@include flex-display();
	// @include flex-box-direction(); 
	// @include flex-box-orient(); 
	@include flex-direction();
	@include flex-wrap();
	@include flex-content();
	@include flex-stretching();
	@include flex-align();	
}


// ========================================
// MISCELANEOUS
// ========================================

/// ARROW BOX
/// @group Misc Mixins
/// @since 0.0.1
@mixin arrow( $color, $size: 10px, $direction: 'top', $position: 'default', $border: none, $border-color: none ) {
	//
	// $color:			Hex, rgb, rgba
	// $size:			value of the arrow height in pixels			|default: 10px
	// $direction:		'top', 'right', 'bottom', 'left'			|default: false
	// $position:		value of the arrow position in percent 		|default: 'default'
	// $border:			value of the arrow border width in pixels 	|default: 'none'
	// $border-color:	Hex, rgb, rgba 								|default: #444
	//

	background-color: $color;
	@if $border != none {
		// Have border
		border: $border solid $border-color;

		&:after, &:before {
			@if $direction == 'top' {
				bottom: 100%;
				@if $position != 'default' {
					left: $position; }
				@else { 
					left: 50%; }
			} @elseif $direction == 'right' {
				left: 100%;
				@if $position != 'default' {
					top: $position; }
				@else {
					top: 50%; }
			} @elseif $direction == 'bottom' {
				top: 100%;
				@if $position != 'default' {
					left: $position; }
				@else {
					left: 50%; }
			} @elseif $direction == 'left' {
				right: 100%;
				@if $position != 'default' {
					top: $position; }
				@else {
					top: 50%; }
			}
			border: solid transparent;
			content: " ";
			height: 0;
			width: 0;
			position: absolute;
			pointer-events: none;
		}
		// La proporcion Aurea
		$border-size: $size + round( $border * 1.41421356 );
		&:after {
			border-color: transparent;
			border-width: $size;
			margin-left: -$size;
			@if $direction == 'top' {
				border-bottom-color: $color;
			} @elseif $direction == 'right' {
				border-left-color: $color;
			} @elseif $direction == 'bottom' {
				border-top-color: $color;
			} @elseif $direction == 'left' {
				border-right-color: $color;
			}
		}
		&:before {
			border-color: transparent;
			border-width: $border-size;
			margin-left: (-$border-size);
			@if $direction == 'top' {
				border-bottom-color: $border-color;
			} @elseif $direction == 'right' {
				border-left-color: $border-color;
			} @elseif $direction == 'bottom' {
				border-top-color: $border-color;
			} @elseif $direction == 'left' {
				border-right-color: $border-color;
			}
		}		
	} @else {
		// If there is no border
		&:after {
			border: solid transparent;
			content: " ";
			height: 0;
			width: 0;
			position: absolute;
			pointer-events: none;
			border-color: transparent;
			border-width: $size;
			// What direction?
			@if $direction == 'top' {
				bottom: 100%;
				@if $position != 'default' {
					left: $position; }
				@else { 
					left: 50%; }
				margin-left: -$size;
				border-bottom-color: $color;
				
			} @elseif $direction == 'right' {
				left: 100%;
				@if $position != 'default' {
					top: $position; }
				@else {
					top: 50%; }
				margin-top: -$size;
				border-left-color: $color;
			} @elseif $direction == 'bottom' {
				top: 100%;
				@if $position != 'default' {
					left: $position; }
				@else {
					left: 50%; }
				margin-left: -$size;
				border-top-color: $color;
			} @elseif $direction == 'left' {
				right: 100%;
				@if $position != 'default' {
					top: $position; }
				@else {
					top: 50%; }
				margin-top: -$size;
				border-right-color: $color;
			}
		}
	}
}