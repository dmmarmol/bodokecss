////
/// Custom BDK Functions
/// Usefull set of functions for the user
////


/// col-width()
/// Devuelve el ancho porcentual segun la cantidad de columnas
/// @param {int} $col-number - The Column number
/// @param {int} $max-cols - Max grid columns
/// @since 0.1
@function col-width( $col-number, $max-cols: $grid-columns ) {
	@return ($col-number * 100%) / $max-cols;
}

@function black( $opacity:1, $output:'rgba' ) {
	@if $opacity != 1 {
		@return rgba(0, 0, 0, $opacity);
	} @else {
		@if $output == 'hex' {
			@return #000;			
		} @elseif $output == 'hls' {
			@return hls(0, 0, 0);
		} @elseif $output == 'rgb' {
			@return rgb(0, 0, 0);
		} @else {
			@return rgba(0, 0, 0, 1);			
		}
	}
}
@function white( $opacity:1, $output: 'rgba' ) {
	@if $opacity != 1 {
		@return rgba(255, 255, 255, $opacity);		
	} @else {
		@if $output == 'hex' {
			@return #FFF;			
		} @elseif $output == 'hls' {
			@return hls(0, 100%, 0);
		} @elseif $output == 'rgb' {
			@return rgb(255, 255, 255);
		} @else {
			@return rgba(255, 255, 255, 1);
		}
		@return #FFF;
	}
}

/// @since 0.1.1
/// devuelve un color segun el indice
/// del array $institutional-color-pallete de colors.scss
@function color($key) {
	@return map-get($institutional-color-pallete, $key);
}
 

/// Atajo para generar un color en escala de grises en base a un valor entre 0 y 255
/// @example gray(125) = rgb(125, 125, 125);
/// @example gray(125, 0.2) = rgba(125, 125, 125, 0.2);
/// @since 0.0.4
@function gray( $value, $alpha:1 ) {
	@if ($alpha == '') {
		@return rgb( $value, $value, $value );
	} @else {
		@return rgba( $value, $value, $value, $alpha );		
	}
}



/// @since 0.1.4
/// bgpos()
/// Calcula la posicion del fondo en base a la multiplicacion de un modulo=
@function bgpos($pos, $module, $unit: px){
	@return -$module * $pos + $unit;
}


@function img( $path, $refresh:false ) {
	@return url( $IMGPATH + $path + if($refresh!=false, '?' + $refresh, '') );
}
@function icon( $path, $refresh:false ) {
	@return url( $IMGPATH + 'icon/' + $path + if($refresh!=false, '?' + $refresh, '') );
}
@function placeholder( $path, $refresh:false ) {
	@return url( $IMGPATH + 'placeholder/' + $path + if($refresh!=false, '?' + $refresh, '') );
}
@function input( $path, $refresh:false ) {
	@return url( $IMGPATH + 'input/' + $path + if($refresh!=false, '?' + $refresh, '') );
}
@function bg( $path, $refresh:false ) {
	@return url( $IMGPATH + 'background/' + $path + if($refresh!=false, '?' + $refresh, '') );
}

// Strip Number Unit
@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}

// $base-em:	16px;
@function em($target, $context: $base-em) {
	@if $target == 0 { @return 0; }
	$context: strip-units( $context );
	$number: strip-units( $target );
	// @warn 'target '+$target;
	// @warn 'number '+$number;
	// @warn 'context '+$context;
	$number: ($number / $context) + 0em;
	// @return $target / $context + 0em;
	@return $number;
}
@function px($target, $context: $base-em){
	@if $target == 0 { @return 0; }
	$context: strip-units( $context );
	$number: strip-units( $target );
	$number: ($number * $context) + 0px;
	@return $number;
}


// 0.0.6
// percent()
// Calcula el porcentaje indicado del numero indicado
// ====================
@function percent( $value, $percent ) {
	@return ($value * $percent) / 100;
}


// 0.1.4
// HugoGiraudel.com/2013/08/08/advanced-sass-list-functions/
// Funciones para el manejo complejo de listas
// ====================

// Devuelve el primer valor de una lista
@function first($list) {
	@return nth($list, 1);
}
// Devuelve el ultimo valor de una lista
@function last($list) {
	@return nth($list, length($list));
}

// Last index of value "x"
@function last-index($list, $value) {
	@for $i from length($list)*-1 through -1 {
		@if nth($list, abs($i)) == $value {
			@return abs($i);
		}
	}
  	@return null;
}

// 0.1.4
// Revierte el orden de una lista
// ====================
@function reverse($list, $recursive: false) {
   $result: ();
   @for $i from length($list)*-1 through -1 {
      @if type-of(nth($list, abs($i))) == list and $recursive {
        $result: append($result, reverse(nth($list, abs($i)), $recursive));      
      }

      @else {
        $result: append($result, nth($list, abs($i)));
      }
   }
   @return $result;
}
// 0.1.4
// Toma una lista, la invierte, devuelve el valor de un item
// segÃºn su correspondiente indice y lo multiplica por 10
// ====================
@function z($list, $value) {
	$reverse: reverse($list);
	$index: index($reverse, $value);
	$index: $index * 10;
	@return $index;
}


// 0.1.5
// Imprime los valores de una lista como un "consoe.log()"
// ====================
@function debugList($list) {
  $result: #{"[ "};

  @each $item in $list {
    @if length($item) > 1 {
      $result: $result#{debug($item)};
    }
    @else {
      $result: $result#{$item};
    }
    @if index($list, $item) != length($list) {
      $result: $result#{", "};
    }
  } 

  $result: $result#{" ]"};

  @return $result;
}

// $list: (a b (c d (e f ( (g h (i j k)) l m))));
// $debug: debug($list);

// 0.1.5
// @param $color_name: Nombre del color
// @param $color_list: Paleta de colores | default: $color-pallete
//
// Devuelve un color del array $color-pallete
// en base al nombre del color 
// ====================
@function c($color_name, $color_list: $color-pallete) {
	$r: '';
	// @warn $color_list;

	@for $i from 1 through length($color_list) {
		$color: nth($color_list, $i);
		$color_list_name: nth($color, 1);
		$color_list_value: nth($color, 2);
		// @debug $color_list_name;
		// @debug $color_list_name + ' '+ $color_name;
		@if ( $color_name == $color_list_name ) {
			$r: $color_list_value;
		}
	}
	@if ( $r != '' ) {
		@return $r;
	} @else {
		@warn 'No existe un color con ese nombre definido en la paleta de colores';
	}
}



/// ifcolor()
/// Imprime el valor del color contrastando con el valor del color de fondo
/// @see $text-color
/// @see $bright-text-color
/// @param {int | function } $bg-color - Color de fondo del elemento
/// @param {int | function } $dark-color - Color oscuro
/// @param {int | function } $bright-color - Color Claro
@function ifcolor($bg-color, $dark-color: $text-color, $bright-color: $bright-text-color) {
	$lightness: lightness($bg-color);
	$treshold:	lightness(#aaa);
	@if ( $lightness > $treshold ) {
		@return $dark-color;
	}
	@else {
		@return $bright-color;	
	}
}



// 
/// list()
/// Devuelve el valor de una lista bi-dimensional segun un string
//
// @function list($item, $list) {
// 	$r: '';
// 	@for $i from 1 through length($list) {
// 		$index: nth($list, $i);
// 		$item_list_name: nth($index, 1);		// Value 1
// 		$item_list_value: nth($index, 2);
// 		// @debug $color_list_name;
// 		// @debug $color_list_name + ' '+ $color_name;
// 		@if ( $item == $color_list_name ) {
// 			$r: $color_list_value;
// 		}
// 	}
// 	@if ( $r != '' ) {
// 		@return $r;
// 	} @else {
// 		@warn 'No existe un color con ese nombre definido en la paleta de colores';
// 	}
// }
