// _functions.scss

// ======================
// Functions
// ======================
@function black( $opacity:1, $output:'rgba' ) {
	@if $opacity != 1 {
		@return rgba(0, 0, 0, $opacity);
	} @else {
		@if $output == 'hex' {
			@return #000;			
		} @elseif $output == 'hls' {
			@return hls(0, 0, 0);
		} @elseif $output == 'rgb' {
			@return rgb(0, 0, 0);
		} @else {
			@return rgba(0, 0, 0, 1);			
		}
	}
}
@function white( $opacity:1, $output: 'rgba' ) {
	@if $opacity != 1 {
		@return rgba(255, 255, 255, $opacity);		
	} @else {
		@if $output == 'hex' {
			@return #FFF;			
		} @elseif $output == 'hls' {
			@return hls(0, 100%, 0);
		} @elseif $output == 'rgb' {
			@return rgb(255, 255, 255);
		} @else {
			@return rgba(255, 255, 255, 1);
		}
		@return #FFF;
	}
}

// 0.1.1
// devuelve un color segun el indice
// del array $institutional-color-pallete de colors.scss
// ====================
@function color($key) {
	@return map-get($institutional-color-pallete, $key);
}
 

// 0.0.4
// ====================
@function gray( $value, $alpha:1 ) {
	@if ($alpha == '') {
		@return rgb( $value, $value, $value );
	} @else {
		@return rgba( $value, $value, $value, $alpha );		
	}
}



// 0.1.4
// bgpos()
// Calcula la posicion del fondo en base a la multiplicacion de un modulo
// =====================
@function bgpos($pos, $module, $unit: px){
	@return -$module * $pos + $unit;
}


@function img( $path, $refresh:false ) {
	@return url( $IMGPATH + $path + if($refresh!=false, '?' + $refresh, '') );
}
@function icon( $path, $refresh:false ) {
	@return url( $IMGPATH + 'icon/' + $path + if($refresh!=false, '?' + $refresh, '') );
}
@function placeholder( $path, $refresh:false ) {
	@return url( $IMGPATH + 'placeholder/' + $path + if($refresh!=false, '?' + $refresh, '') );
}
@function input( $path, $refresh:false ) {
	@return url( $IMGPATH + 'input/' + $path + if($refresh!=false, '?' + $refresh, '') );
}
@function bg( $path, $refresh:false ) {
	@return url( $IMGPATH + 'background/' + $path + if($refresh!=false, '?' + $refresh, '') );
}

// Strip Number Unit
@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}

// $base-em:	16px;
@function em($target, $round: false, $context: $base-em) {
	@if $target == 0 { 
		@return 0;
	}
	$number: strip-units( $target );
	$number: ($number * $context) + 0px;
	@if $round == 'round' {
		$number: round($number);
	} @elseif $round == 'floor' {
		$number: floor($number);
	} @elseif $round == 'ceil' {
		$number: ceil($number);
	}
	@return $target / $context + 0em;
}
@function px($target, $round: false, $context: $base-em){
	$number: strip-units( $target );
	$number: ($number * $context) + 0px;
	@if $round == 'round' {
		$number: round($number);
	} @elseif $round == 'floor' {
		$number: floor($number);
	} @elseif $round == 'ceil' {
		$number: ceil($number);
	}
	@return $number;
}


// 0.0.6
// percent()
// Calcula el porcentaje indicado del numero indicado
// ====================
@function percent( $value, $percent ) {
	@return ($value * $percent) / 100;
}


// 0.1.4
// HugoGiraudel.com/2013/08/08/advanced-sass-list-functions/
// Funciones para el manejo complejo de listas
// ====================

// Devuelve el primer valor de una lista
@function first($list) {
	@return nth($list, 1);
}
// Devuelve el ultimo valor de una lista
@function last($list) {
	@return nth($list, length($list));
}

// Last index of value "x"
@function last-index($list, $value) {
	@for $i from length($list)*-1 through -1 {
		@if nth($list, abs($i)) == $value {
			@return abs($i);
		}
	}
  	@return null;
}